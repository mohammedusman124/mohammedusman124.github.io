*Introduction to Javascript
console.log('Hello World'); 
*Naming convention
valid:jscode,_js
invalid:@jscode,123number
*Conditional statements
<!DOCTYPE html>
<html>
<body>
<h2>JavaScript if .. else</h2>
<p>A time-based greeting:</p>
<p id="demo"></p>
<script>
const hour = new Date().getHours(); 
let greeting;
if (hour < 18) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}
document.getElementById("demo").innerHTML = greeting;
</script>
</body>
</html>
*Arithmetic operation
<!DOCTYPE html>
<html>
<body>
<h2>JavaScript Arithmetic</h2>
<p>arithmetic operation.</p>
<p id="demo"></p>
<script>
let x = 100 + 50;
document.getElementById("demo").innerHTML = x;
</script>
</body>
</html>
*Array slice method
function func() {
        var arr = [23,56,87,32,75,13];
        var new_arr = arr.slice();
        console.log(arr);
        console.log(new_arr);
    }
    func();
*OOPs concept
    let person = {
        first_name:'Mukul',
        last_name: 'Latiyan',
        getFunction : function(){
            return (`The name of the person is 
              ${person.first_name} ${person.last_name}`)
        },
        phone_number : {
            mobile:'12345',
            landline:'6789'
        }
    }
    console.log(person.getFunction()); 
    console.log(person.phone_number.landline);
Encapsulation example
    class person{
        constructor(name,id){
            this.name = name;
            this.id = id;
        }
        add_Address(add){
            this.add = add;
        }
        getDetails(){
            console.log(`Name is ${this.name},
            Address is: ${this.add}`);
        }
    }
    let person1 = new person('Mukul',21);
    person1.add_Address('Delhi');
    person1.getDetails();
*Exception handling
 Exception handling is a process or method used for handling the abnormal statements in the code and executing them.
<p id="demo"></p>
<script>
try {
  adddlert("Welcome guest!");
}
catch(err) {
  document.getElementById("demo").innerHTML = err.message;
}
*Document Object Model(DOM)- programming interface 
<table>
  <ROWS>
    <tr>
      <td>Car</td>
      <td>Scooter</td>
    </tr>
    <tr>
      <td>MotorBike</td>
      <td>Bus</td>
    </tr>
  </ROWS>
</table>
* Closure
A closure is a feature of JavaScript that allows inner functions to access their outer scope
function foo()
{
    var b = 1;
    function inner(){
        return b;
    }
    return inner;
}
var get_func_inner = foo();  
console.log(get_func_inner());
console.log(get_func_inner());
console.log(get_func_inner());
*Promises
Promises are used to handle asynchronous operations.
var promise = new Promise(function(resolve, reject) { 
  const x = "js"; 
  const y = "js"
  if(x === y) { 
    resolve(); 
  } else { 
    reject(); 
  } 
}); 
    promise. 
    then(function () { 
        console.log('Success, You are a js'); 
    }). 
    catch(function () { 
        console.log('Some error has occurred'); 
    });
*Ping pong game
let gameState = 'start';
let paddle_1 = document.querySelector('.paddle_1');
let paddle_2 = document.querySelector('.paddle_2');
let board = document.querySelector('.board');
let initial_ball = document.querySelector('.ball');
let ball = document.querySelector('.ball');
let score_1 = document.querySelector('.player_1_score');
let score_2 = document.querySelector('.player_2_score');
let message = document.querySelector('.message');
let paddle_1_coord = paddle_1.getBoundingClientRect();
let paddle_2_coord = paddle_2.getBoundingClientRect();
let initial_ball_coord = ball.getBoundingClientRect();
let ball_coord = initial_ball_coord;
let board_coord = board.getBoundingClientRect();
let paddle_common =
	document.querySelector('.paddle').getBoundingClientRect();
let dx = Math.floor(Math.random() * 4) + 3;
let dy = Math.floor(Math.random() * 4) + 3;
let dxd = Math.floor(Math.random() * 2);
let dyd = Math.floor(Math.random() * 2);
document.addEventListener('keydown', (e) => {
if (e.key == 'Enter') {
	gameState = gameState == 'start' ? 'play' : 'start';
	if (gameState == 'play') {
	message.innerHTML = 'Game Started';
	message.style.left = 42 + 'vw';
	requestAnimationFrame(() => {
		dx = Math.floor(Math.random() * 4) + 3;
		dy = Math.floor(Math.random() * 4) + 3;
		dxd = Math.floor(Math.random() * 2);
		dyd = Math.floor(Math.random() * 2);
		moveBall(dx, dy, dxd, dyd);
	});
	}
}
if (gameState == 'play') {
	if (e.key == 'w') {
	paddle_1.style.top =
		Math.max(
		board_coord.top,
		paddle_1_coord.top - window.innerHeight * 0.06
		) + 'px';
	paddle_1_coord = paddle_1.getBoundingClientRect();
	}
	if (e.key == 's') {
	paddle_1.style.top =
		Math.min(
		board_coord.bottom - paddle_common.height,
		paddle_1_coord.top + window.innerHeight * 0.06
		) + 'px';
	paddle_1_coord = paddle_1.getBoundingClientRect();
	}

	if (e.key == 'ArrowUp') {
	paddle_2.style.top =
		Math.max(
		board_coord.top,
		paddle_2_coord.top - window.innerHeight * 0.1
		) + 'px';
	paddle_2_coord = paddle_2.getBoundingClientRect();
	}
	if (e.key == 'ArrowDown') {
	paddle_2.style.top =
		Math.min(
		board_coord.bottom - paddle_common.height,
		paddle_2_coord.top + window.innerHeight * 0.1
		) + 'px';
	paddle_2_coord = paddle_2.getBoundingClientRect();
	}
}
});
function moveBall(dx, dy, dxd, dyd) {
if (ball_coord.top <= board_coord.top) {
	dyd = 1;
}
if (ball_coord.bottom >= board_coord.bottom) {
	dyd = 0;
}
if (
	ball_coord.left <= paddle_1_coord.right &&
	ball_coord.top >= paddle_1_coord.top &&
	ball_coord.bottom <= paddle_1_coord.bottom
) {
	dxd = 1;
	dx = Math.floor(Math.random() * 4) + 3;
	dy = Math.floor(Math.random() * 4) + 3;
}
if (
	ball_coord.right >= paddle_2_coord.left &&
	ball_coord.top >= paddle_2_coord.top &&
	ball_coord.bottom <= paddle_2_coord.bottom
) {
	dxd = 0;
	dx = Math.floor(Math.random() * 4) + 3;
	dy = Math.floor(Math.random() * 4) + 3;
}
if (
	ball_coord.left <= board_coord.left ||
	ball_coord.right >= board_coord.right
) {
	if (ball_coord.left <= board_coord.left) {
	score_2.innerHTML = +score_2.innerHTML + 1;
	} else {
	score_1.innerHTML = +score_1.innerHTML + 1;
	}
	gameState = 'start';
	ball_coord = initial_ball_coord;
	ball.style = initial_ball.style;
	message.innerHTML = 'Press Enter to Play Pong';
	message.style.left = 38 + 'vw';
	return;
}
ball.style.top = ball_coord.top + dy * (dyd == 0 ? -1 : 1) + 'px';
ball.style.left = ball_coord.left + dx * (dxd == 0 ? -1 : 1) + 'px';
ball_coord = ball.getBoundingClientRect();
requestAnimationFrame(() => {
	moveBall(dx, dy, dxd, dyd);
});
}

*Color-picker game
js code...
let red = document.getElementById('red');
let green = document.getElementById('green');
let blue = document.getElementById('blue');
let box = document.querySelector('div.neumorphism-3');
let r = 0, g = 0, b = 0;
red.addEventListener("keyup", function (event) {
	r = red.value;
	if (!r)
		r = 0;
	box.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
});
green.addEventListener("keyup", function (event) {
	g = green.value;
	if (!g)
		g = 0;
	box.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
});
blue.addEventListener("keyup", function (event) {
	b = blue.value;
	if (!b)
		b = 0;
	box.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
});

